"""Crop and Production models added

Revision ID: 7caa9899facd
Revises: d7829e775ba1
Create Date: 2020-07-25 23:01:49.952171

"""
from alembic import op
import sqlalchemy as sa
import backend
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7caa9899facd'
down_revision = 'd7829e775ba1'
branch_labels = ()
depends_on = None


def upgrade():
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('crop_cultivation_type',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=False),
    sa.Column('description', sa.String(length=256), nullable=True),
    sa.Column('yield_modifier', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_crop_cultivation_type'))
    )
    op.create_table('crop_variant',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=False),
    sa.Column('latin', sa.String(length=64), nullable=False),
    sa.Column('description', sa.String(length=256), nullable=True),
    sa.Column('yield_modifier', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_crop_variant'))
    )
    op.create_table('unit',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_unit'))
    )
    op.create_table('crop_base',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=False),
    sa.Column('description', sa.String(length=256), nullable=True),
    sa.Column('base_yield', sa.Float(), nullable=False),
    sa.Column('unit_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['unit_id'], ['unit.id'], name=op.f('fk_crop_base_unit_id_unit')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_crop_base'))
    )
    op.create_table('crop_template',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=True),
    sa.Column('crop_base_id', sa.BigInteger(), nullable=False),
    sa.Column('crop_cultivation_type_id', sa.BigInteger(), nullable=False),
    sa.Column('crop_variant_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['crop_base_id'], ['crop_base.id'], name=op.f('fk_crop_template_crop_base_id_crop_base')),
    sa.ForeignKeyConstraint(['crop_cultivation_type_id'], ['crop_cultivation_type.id'], name=op.f('fk_crop_template_crop_cultivation_type_id_crop_cultivation_type')),
    sa.ForeignKeyConstraint(['crop_variant_id'], ['crop_variant.id'], name=op.f('fk_crop_template_crop_variant_id_crop_variant')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_crop_template'))
    )
    op.create_table('field_detail_production',
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('field_detail_id', sa.BigInteger(), nullable=False),
    sa.Column('production_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['field_detail_id'], ['field_detail.id'], name=op.f('fk_field_detail_production_field_detail_id_field_detail')),
    sa.ForeignKeyConstraint(['production_id'], ['production.id'], name=op.f('fk_field_detail_production_production_id_production')),
    sa.PrimaryKeyConstraint('field_detail_id', 'production_id', name=op.f('pk_field_detail_production'))
    )
    op.drop_table('field_production')
    #op.drop_table('spatial_ref_sys')
    op.drop_index('idx_field_detail_shape', table_name='field_detail')
    op.add_column('production', sa.Column('crop_template_id', sa.BigInteger(), nullable=False))
    op.add_column('production', sa.Column('use_as_template', sa.Boolean(), nullable=False))
    op.create_foreign_key(op.f('fk_production_id_resource'), 'production', 'resource', ['id'], ['resource_id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('fk_production_crop_template_id_crop_template'), 'production', 'crop_template', ['crop_template_id'], ['id'])
    op.drop_column('production', 'created_at')
    op.drop_column('production', 'updated_at')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('production', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('production', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_production_crop_template_id_crop_template'), 'production', type_='foreignkey')
    op.drop_constraint(op.f('fk_production_id_resource'), 'production', type_='foreignkey')
    op.drop_column('production', 'use_as_template')
    op.drop_column('production', 'crop_template_id')
    op.create_index('idx_field_detail_shape', 'field_detail', ['shape'], unique=False)
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('(srid > 0) AND (srid <= 998999)', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.create_table('field_production',
    sa.Column('field_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('production_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['field_id'], ['field.id'], name='fk_field_production_field_id_field'),
    sa.ForeignKeyConstraint(['production_id'], ['production.id'], name='fk_field_production_production_id_production'),
    sa.PrimaryKeyConstraint('field_id', 'production_id', name='pk_field_production')
    )
    op.drop_table('field_detail_production')
    op.drop_table('crop_template')
    op.drop_table('crop_base')
    op.drop_table('unit')
    op.drop_table('crop_variant')
    op.drop_table('crop_cultivation_type')
    # ### end Alembic commands ###
