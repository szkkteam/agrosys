"""Parcel based layout

Revision ID: 62ca544ec0ba
Revises: 20e072b68d4a
Create Date: 2020-08-24 06:48:09.736375

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.schema import DropTable
from sqlalchemy.ext.compiler import compiles
import geoalchemy2
import backend
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '62ca544ec0ba'
down_revision = '20e072b68d4a'
branch_labels = ()
depends_on = None

@compiles(DropTable, "postgresql")
def _compile_drop_table(element, compiler, **kwargs):
    return compiler.visit_drop_table(element) + " CASCADE"

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('country',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=False),
    sa.Column('iso2', sa.String(length=2), nullable=False),
    sa.Column('iso3', sa.String(length=3), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_country'))
    )
    op.create_index(op.f('ix_country_iso3'), 'country', ['iso3'], unique=True)
    op.create_table('reference_parcel_type',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('code', sa.Enum('AgriculturalParcel', 'CadastralParcel', 'FarmersBlock', 'PhysicalBlock', name='referenceparceltypeenum'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=False),
    sa.Column('description', sa.String(length=64), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reference_parcel_type'))
    )
    op.create_table('reference_parcel',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=True),
    sa.Column('notes', sa.String(length=256), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('total_area', sa.Float(), nullable=False),
    sa.Column('eligible_area', sa.Float(), nullable=False),
    sa.Column('soil_type_id', sa.BigInteger(), nullable=False),
    sa.Column('reference_parcel_type_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['reference_parcel_type_id'], ['reference_parcel_type.id'], name=op.f('fk_reference_parcel_reference_parcel_type_id_reference_parcel_type')),
    sa.ForeignKeyConstraint(['soil_type_id'], ['soil_type.id'], name=op.f('fk_reference_parcel_soil_type_id_soil_type')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reference_parcel'))
    )
    op.create_table('reference_parcel_relation',
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('group_id', sa.BigInteger(), nullable=False),
    sa.Column('parcel_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['reference_parcel.id'], name=op.f('fk_reference_parcel_relation_group_id_reference_parcel'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parcel_id'], ['reference_parcel.id'], name=op.f('fk_reference_parcel_relation_parcel_id_reference_parcel'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('group_id', 'parcel_id', name=op.f('pk_reference_parcel_relation'))
    )
    op.create_table('plan',
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=128), nullable=False),
    sa.Column('crop_template_id', sa.BigInteger(), nullable=False),
    sa.Column('plan_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('ordering', sa.Integer(), nullable=False),
    sa.Column('plan_name', sa.Unicode(length=100), nullable=False),
    sa.Column('plan_type', sa.Unicode(length=30), nullable=False),
    sa.ForeignKeyConstraint(['crop_template_id'], ['crop_template.id'], name=op.f('fk_plan_crop_template_id_crop_template')),
    sa.ForeignKeyConstraint(['parent_id'], ['plan.plan_id'], name=op.f('fk_plan_parent_id_plan'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('plan_id', name=op.f('pk_plan')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_table('season',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('title', sa.String(length=64), nullable=True),
    sa.Column('farm_id', sa.BigInteger(), nullable=False),
    sa.Column('archived_at', backend.database.types.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['farm_id'], ['farm.id'], name=op.f('fk_season_farm_id_farm'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_season'))
    )
    op.create_table('season_reference_parcel',
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('season_id', sa.BigInteger(), nullable=False),
    sa.Column('reference_parcel_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['reference_parcel_id'], ['reference_parcel.id'], name=op.f('fk_season_reference_parcel_reference_parcel_id_reference_parcel'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['season_id'], ['season.id'], name=op.f('fk_season_reference_parcel_season_id_season'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('season_id', 'reference_parcel_id', name=op.f('pk_season_reference_parcel'))
    )
    op.create_table('template',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['plan.plan_id'], name=op.f('fk_template_id_plan'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_template')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_table('farm_template',
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('farm_id', sa.BigInteger(), nullable=False),
    sa.Column('template_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['farm_id'], ['farm.id'], name=op.f('fk_farm_template_farm_id_farm'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['template.id'], name=op.f('fk_farm_template_template_id_template'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('farm_id', 'template_id', name=op.f('pk_farm_template'))
    )
    op.create_table('reference_parcel_production',
    sa.Column('created_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', backend.database.types.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('production_id', sa.BigInteger(), nullable=False),
    sa.Column('reference_parcel_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['production_id'], ['production.id'], name=op.f('fk_reference_parcel_production_production_id_production'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reference_parcel_id'], ['reference_parcel.id'], name=op.f('fk_reference_parcel_production_reference_parcel_id_reference_parcel'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('production_id', 'reference_parcel_id', name=op.f('pk_reference_parcel_production'))
    )
    op.drop_table('field_detail')
    op.drop_table('field_detail_production')
    op.drop_table('profile')
    op.drop_table('field')
    #op.drop_table('spatial_ref_sys')
    op.add_column('farm', sa.Column('country_id', sa.BigInteger(), nullable=False))
    op.create_foreign_key(op.f('fk_farm_country_id_country'), 'farm', 'country', ['country_id'], ['id'], ondelete='CASCADE')
    op.add_column('production', sa.Column('archived_at', backend.database.types.DateTime(timezone=True), nullable=True))
    op.drop_constraint('fk_production_crop_template_id_crop_template', 'production', type_='foreignkey')
    op.drop_constraint('fk_production_id_resource', 'production', type_='foreignkey')
    op.create_foreign_key(op.f('fk_production_id_plan'), 'production', 'plan', ['id'], ['plan_id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_column('production', 'title')
    op.drop_column('production', 'use_as_template')
    op.drop_column('production', 'crop_template_id')
    op.add_column('task', sa.Column('plan_id', sa.BigInteger(), nullable=False))
    op.drop_constraint('fk_task_production_id_production', 'task', type_='foreignkey')
    op.create_foreign_key(op.f('fk_task_plan_id_plan'), 'task', 'plan', ['plan_id'], ['plan_id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_column('task', 'production_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('task', sa.Column('production_id', sa.BIGINT(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_task_plan_id_plan'), 'task', type_='foreignkey')
    op.create_foreign_key('fk_task_production_id_production', 'task', 'production', ['production_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_column('task', 'plan_id')
    op.add_column('production', sa.Column('crop_template_id', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('production', sa.Column('use_as_template', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('production', sa.Column('title', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_production_id_plan'), 'production', type_='foreignkey')
    op.create_foreign_key('fk_production_id_resource', 'production', 'resource', ['id'], ['resource_id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_production_crop_template_id_crop_template', 'production', 'crop_template', ['crop_template_id'], ['id'])
    op.drop_column('production', 'archived_at')
    op.drop_constraint(op.f('fk_farm_country_id_country'), 'farm', type_='foreignkey')
    op.drop_column('farm', 'country_id')
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('(srid > 0) AND (srid <= 998999)', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.create_table('field',
    sa.Column('title', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('farm_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['farm_id'], ['farm.id'], name='fk_field_farm_id_farm', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id'], ['resource.resource_id'], name='fk_field_id_resource', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_field'),
    postgresql_ignore_search_path=False
    )
    op.create_table('profile',
    sa.Column('display_name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['resource.resource_id'], name='fk_profile_id_resource', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_profile')
    )
    op.create_table('field_detail_production',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('field_detail_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('production_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['field_detail_id'], ['field_detail.id'], name='fk_field_detail_production_field_detail_id_field_detail', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['production_id'], ['production.id'], name='fk_field_detail_production_production_id_production', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('field_detail_id', 'production_id', name='pk_field_detail_production')
    )
    op.create_table('field_detail',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('area', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('shape', geoalchemy2.types.Geometry(geometry_type='POLYGON', from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=False),
    sa.Column('soil_type_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('field_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['field_id'], ['field.id'], name='fk_field_detail_field_id_field', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['soil_type_id'], ['soil_type.id'], name='fk_field_detail_soil_type_id_soil_type'),
    sa.PrimaryKeyConstraint('id', name='pk_field_detail')
    )
    op.drop_table('reference_parcel_production')
    op.drop_table('farm_template')
    op.drop_table('template')
    op.drop_table('season_reference_parcel')
    op.drop_table('season')
    op.drop_table('plan')
    op.drop_table('reference_parcel_relation')
    op.drop_table('reference_parcel')
    op.drop_table('reference_parcel_type')
    op.drop_index(op.f('ix_country_iso3'), table_name='country')
    op.drop_table('country')
    # ### end Alembic commands ###
